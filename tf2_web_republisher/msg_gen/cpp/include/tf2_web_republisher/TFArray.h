/* Auto-generated by genmsg_cpp for file /home/praktikum/labprogramr_1/ros-workspace/tf2_web_republisher/msg/TFArray.msg */
#ifndef TF2_WEB_REPUBLISHER_MESSAGE_TFARRAY_H
#define TF2_WEB_REPUBLISHER_MESSAGE_TFARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/TransformStamped.h"

namespace tf2_web_republisher
{
template <class ContainerAllocator>
struct TFArray_ {
  typedef TFArray_<ContainerAllocator> Type;

  TFArray_()
  : transforms()
  {
  }

  TFArray_(const ContainerAllocator& _alloc)
  : transforms(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::TransformStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::TransformStamped_<ContainerAllocator> >::other >  _transforms_type;
  std::vector< ::geometry_msgs::TransformStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::TransformStamped_<ContainerAllocator> >::other >  transforms;


  typedef boost::shared_ptr< ::tf2_web_republisher::TFArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tf2_web_republisher::TFArray_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TFArray
typedef  ::tf2_web_republisher::TFArray_<std::allocator<void> > TFArray;

typedef boost::shared_ptr< ::tf2_web_republisher::TFArray> TFArrayPtr;
typedef boost::shared_ptr< ::tf2_web_republisher::TFArray const> TFArrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::tf2_web_republisher::TFArray_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::tf2_web_republisher::TFArray_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace tf2_web_republisher

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tf2_web_republisher::TFArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tf2_web_republisher::TFArray_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tf2_web_republisher::TFArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "94810edda583a504dfda3829e70d7eec";
  }

  static const char* value(const  ::tf2_web_republisher::TFArray_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x94810edda583a504ULL;
  static const uint64_t static_value2 = 0xdfda3829e70d7eecULL;
};

template<class ContainerAllocator>
struct DataType< ::tf2_web_republisher::TFArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tf2_web_republisher/TFArray";
  }

  static const char* value(const  ::tf2_web_republisher::TFArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tf2_web_republisher::TFArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/TransformStamped[] transforms\n\
================================================================================\n\
MSG: geometry_msgs/TransformStamped\n\
# This expresses a transform from coordinate frame header.frame_id\n\
# to the coordinate frame child_frame_id\n\
#\n\
# This message is mostly used by the \n\
# <a href=\"http://www.ros.org/wiki/tf\">tf</a> package. \n\
# See it's documentation for more information.\n\
\n\
Header header\n\
string child_frame_id # the frame id of the child frame\n\
Transform transform\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::tf2_web_republisher::TFArray_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tf2_web_republisher::TFArray_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.transforms);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TFArray_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tf2_web_republisher::TFArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::tf2_web_republisher::TFArray_<ContainerAllocator> & v) 
  {
    s << indent << "transforms[]" << std::endl;
    for (size_t i = 0; i < v.transforms.size(); ++i)
    {
      s << indent << "  transforms[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::TransformStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.transforms[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // TF2_WEB_REPUBLISHER_MESSAGE_TFARRAY_H

